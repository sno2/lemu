//! Generates a tmLanguage for LEGv8 assembly.

const std = @import("std");

const common = @import("common.zig");

pub fn main() !void {
    var stdout_file: std.fs.File = .stdout();
    var buf: [128]u8 = undefined;
    var stdout_writer = stdout_file.writer(&buf);
    try run(&stdout_writer.interface);
    try stdout_writer.interface.flush();
}

fn run(writer: *std.io.Writer) !void {
    try writer.print(
        \\{{
        \\  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
        \\  "comment": "This file is generated by src/grammars/tmLanguage.zig. Run 'zig build tmLanguage' to re-generate.",
        \\  "name": "LEGv8",
        \\  "scopeName": "source.legv8",
        \\  "fileTypes": ["lv8", "legv8", "S"],
        \\  "patterns": [
        \\    {{
        \\      "name": "comment.line",
        \\      "begin": "//",
        \\      "end": "$"
        \\    }},
        \\    {{
        \\      "name": "variable",
        \\      "match": "{f}"
        \\    }},
        \\    {{
        \\      "name": "keyword",
        \\      "match": "
    , .{common.EscapeFmt.init(common.regex.register)});

    try common.regex.writeInstruction(writer, true);

    try writer.writeAll(
        \\"
        \\    },
        \\
    );

    try writer.print(
        \\    {{
        \\      "name": "entity.name.function",
        \\      "match": "{f}"
        \\    }},
        \\    {{
        \\      "name": "constant.numeric",
        \\      "match": "{f}"
        \\    }},
        \\    {{
        \\      "name": "constant.numeric",
        \\      "match": "{f}"
        \\    }},
        \\    {{
        \\      "name": "constant.numeric",
        \\      "match": "{f}"
        \\    }}
        \\  ]
        \\}}
        \\
    , .{
        common.EscapeFmt.init(common.regex.label),
        common.EscapeFmt.init(common.regex.bin),
        common.EscapeFmt.init(common.regex.hex),
        common.EscapeFmt.init(common.regex.dec),
    });
}
